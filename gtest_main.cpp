#include <cstring>
#include "gtest-1.13/googletest/include/gtest/gtest.h"
#include "parse.hpp"

TEST(Parse, shrb_check_arg) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shrb{9});"};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "arg \"shrb\" must be < 8: 9", parse.msg.size()));
}


TEST(Parse, every) {
	std::vector<uint8_t> kIn{
		9, 0,//size
		1,2,3,4,5,6,7,8,9,//data
		6, 0,//size
		1,2,3,4,5,6,//data
		10, 0,//size
		1,2,3,4,5,6,7,8,9,10//data
	};
	char const* script{"every(0,0x00FF,0);"};
	auto parse = Parsed(script);
	/* parse.Run(kIn.data(), kIn.size()); */
	int y{};
}

TEST(Parse, shrb) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	char const* script{"exec(shrb{3});"};
	std::vector<uint8_t> out{
		0x15, 0x48, 0x68, 0xEA, 0x05, 0xE6, 0x06, 0x3F, 
			0x10, 0x80, 0x15, 0x00, 0xA0, 0x20, 0x20, 0x20
	};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, shrb_shlb) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	char const* script{"exec(shrb{3},shlb{3});"};
	std::vector<uint8_t> out{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	auto parse = Parsed(script);
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, shlb_shrb) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	char const* script{"exec(shlb{3},shrb{3});"};
	std::vector<uint8_t> out{
		0x0A, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	auto parse = Parsed(script);
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, shlb_shr_shrb) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	char const* script{"exec(shlb{3},shr{3},shrb{3});"};
	auto parse = Parsed(script);
	std::vector<uint8_t> out{
		0x10, 0x2F, 0x30, 0x31, 0xF8, 0x84, 0x00, 0xA8, 0x05, 0x01, 0x01, 0x01, 0x02
	};
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, crop) {
	std::vector<uint8_t> in{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(crop{3,2});"};
	auto parse = Parsed(script);
	std::vector<uint8_t> out{
		0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69
	};
	parse.Run(in.data(), in.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, shr) {
	std::vector<uint8_t> in{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shr{3});"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	std::vector<uint8_t> out{
		0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	parse.Run(in.data(), in.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, shr_insert) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shr{3},insert{[1,2,3]});"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	std::vector<uint8_t> out{
		1,2,3,0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, out_of_range_left) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shr{3},crop{1,1},shl{1});"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "Out of range: -1", parse.msg.size()));
}

TEST(Parse, out_of_range_right) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shr{140});"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "Out of range: -11", parse.msg.size()));
}

TEST(Parse, out_of_range_packet) {
	std::vector<uint8_t> kIn{1,2,3,4,5,6};
	char const* script{"exec(crop{6,1});"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "Out of range. Packet: 0", parse.msg.size()));
}

TEST(Parse, missing_bracket) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec(shr{140};"};
	uint8_t err{};
	uint64_t num_pck{};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "Missing \")\" or \";\"", parse.msg.size()));
}

TEST(Parse, check_lid_and) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec("
		"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			"and{0b10},"
			");"
	};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	ASSERT_TRUE(parse.lid == 0xFFFFFFFFFFFFFFFF);
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "LID overflow", parse.msg.size()));
}

TEST(Parse, check_lid_and_not) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec("
		"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			"!and{0b1},"
			");"
	};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	ASSERT_FALSE(parse.msg.size() == 0);
	ASSERT_TRUE(parse.lid == 0xFFFFFFFFFFFFFFFF);
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "LID overflow", parse.msg.size()));
}

TEST(Parse, check_lid_split) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec("
		"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			"split{0b10},"
			");"
	};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	ASSERT_FALSE(parse.msg.size() == 0);
	ASSERT_TRUE(parse.lid == 0x0202020202020202);
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "LID overflow", parse.msg.size()));
}

TEST(Parse, inversion) {
	char const* script{"exec(inversion{});"};
	std::vector<uint8_t> kIn{1,2,3,4,5,6};
	std::vector<uint8_t> out{0xFE,0xFD,0xFC,0xFB,0xFA,0xF9};
	auto parse = Parsed(script);
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, mod) {
	char const* script{"exec(mod{[3,3,3,4,5,6]});"};
	std::vector<uint8_t> kIn{1,2,3,4,5,6};
	std::vector<uint8_t> out{1,2,0,0,0,0};
	auto parse = Parsed(script);
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, xor) {
	char const* script{"exec(xor{[1,2,3,4,5,6]});"};
	std::vector<uint8_t> kIn{1,2,3,4,5,6};
	std::vector<uint8_t> out{0,0,0,0,0,0};
	auto parse = Parsed(script);
	parse.RunInsert(kIn.data(), kIn.size());
	EXPECT_TRUE(0 == std::memcmp(out.data(), parse.vec.data(), out.size()));
}

TEST(Parse, check_lid_split_not) {
	std::vector<uint8_t> kIn{
		0xAA, 0x43, 0x47, 0x50, 0x2F, 0x30, 0x31, 0xF8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x84, 0x00, 0xA8,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x01, 0x02, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x5F, 0x9A, 0xB2, 0x56, 0x65, 0x3D, 0x11, 0x08,
			0x50, 0x6A, 0xE8, 0x2D, 0x5F, 0x63, 0x8F, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
			0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x05, 0xA4, 0x00, 0x00, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x16, 0x43, 0x69, 0x74, 0x72, 0x69,
			0x78, 0x2E, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
			0x65
	};
	char const* script{"exec("
		"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			"!split{0b10},"
			");"
	};
	auto parse = Parsed(script);
	parse.Run(kIn.data(), kIn.size());
	ASSERT_FALSE(parse.msg.size() == 0);
	ASSERT_TRUE(parse.lid == 0xfdfdfdfdfdfdfdfd);
	EXPECT_TRUE(0 == std::memcmp(parse.msg.c_str(), "LID overflow", parse.msg.size()));
}

int main(int argc, char **argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
